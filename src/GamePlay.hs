{-# LANGUAGE OverloadedStrings #-}

module GamePlay
  ( Card
  , randomCardsIO
  , takeUniques
  ) where

import           Data.List.Split (chunksOf)
import           Data.Text       (Text)
import           System.Random   (RandomGen, getStdGen, randomRs)

type Card = Text

type Grid = [[Card]]

allCards :: [Text]
-- get real cards later, just random "words" for now
allCards =
  [ "ACE"
  , "ALASKA"
  , "ANT"
  , "ANTHEM"
  , "APRON"
  , "ARMOR"
  , "ARMY"
  , "ASTRONAUT"
  , "ATTIC"
  , "AVALANCHE"
  , "AXE"
  , "BABY"
  , "BACON"
  , "BALLOON"
  , "BANANA"
  , "BARBECUE"
  , "BASS"
  , "BATH"
  , "BATTLESHIP"
  , "BAY"
  , "BEAM"
  , "BEAN"
  , "BENCH"
  , "BICYCLE"
  , "BIG BANG"
  , "BIG BEN"
  , "BIKINI"
  , "BLACK HOLE"
  , "BLADE"
  , "BLIND"
  , "BOIL"
  , "BONSAI"
  , "BOOK"
  , "BOSS"
  , "BOXER"
  , "BRAIN"
  , "BRASS"
  , "BRAZIL"
  , "BREAK"
  , "BRICK"
  , "BRIDE"
  , "BROTHER"
  , "BUBBLE"
  , "BUCKET"
  , "BULB"
  , "BUNK"
  , "BUTTER"
  , "CABLE"
  , "CAESAR"
  , "CAKE"
  , "CAMP"
  , "CANE"
  , "CAPTAIN"
  , "CASTLE"
  , "CHAIN"
  , "CHALK"
  , "CHIP"
  , "CHRISTMAS"
  , "CLOCK"
  , "CLOUD"
  , "COACH"
  , "COLLAR"
  , "COLUMBUS"
  , "COMB"
  , "COMET"
  , "COMPUTER"
  , "COUNTRY"
  , "COW"
  , "CRAB"
  , "CRAFT"
  , "CRUSADER"
  , "CRYSTAL"
  , "CUCKOO"
  , "DASH"
  , "DENTIST"
  , "DESK"
  , "DOLLAR"
  , "DOOR"
  , "DREAM"
  , "DRESSING"
  , "DRIVER"
  , "DRUM"
  , "DUST"
  , "EAR"
  , "EASTER"
  , "EDEN"
  , "EGG"
  , "EINSTEIN"
  , "FEVER"
  , "FIDDLE"
  , "FLAT"
  , "FLOOD"
  , "FLOOR"
  , "FROG"
  , "GARDEN"
  , "GEAR"
  , "GENIE"
  , "GLACIER"
  , "GOAT"
  , "GOLDILOCKS"
  , "GOVERNOR"
  , "GREENHOUSE"
  , "GROOM"
  , "HAIR"
  , "HAMBURGER"
  , "HAMMER"
  , "HAWAII"
  , "HELMET"
  , "HERCULES"
  , "HIDE"
  , "HOSE"
  , "HOUSE"
  , "ICELAND"
  , "JAIL"
  , "JOAN OF ARC"
  , "KING ARTHUR"
  , "KISS"
  , "KITCHEN"
  , "KNOT"
  , "KUNG FU"
  , "JELLYFISH"
  , "JEWELLER"
  , "JOCKEY"
  , "JOKER"
  , "LACE"
  , "LADDER"
  , "LEAF"
  , "LEATHER"
  , "LIGHTNING"
  , "LIP"
  , "LOCUST"
  , "LOVE"
  , "LUMBERJACK"
  , "LUNCH"
  , "MAGAZINE"
  , "MAKEUP"
  , "MANICURE"
  , "MARACAS"
  , "MARATHON"
  , "MARK"
  , "MEDIC"
  , "MEMORY"
  , "MESS"
  , "METER"
  , "MICROWAVE"
  , "MILE"
  , "MINOTAUR"
  , "MISS"
  , "MOHAWK"
  , "MONA LISA"
  , "MOSES"
  , "MOTHER"
  , "MOUNTIE"
  , "MUD"
  , "MUSTARD"
  , "NAPOLEON"
  , "NOAH"
  , "NOSE"
  , "NOTRE DAME"
  , "NYLON"
  , "OASIS"
  , "PACIFIC"
  , "PAD"
  , "PAGE"
  , "PAINT"
  , "PARADE"
  , "PARROT"
  , "PEA"
  , "PEACH"
  , "PEN"
  , "PENTAGON"
  , "PEPPER"
  , "PEW"
  , "PILLOW"
  , "PIZZA"
  , "POLISH"
  , "POTATO"
  , "POTTER"
  , "POWDER"
  , "PUPPET"
  , "PURSE"
  , "RADIO"
  , "RAIL"
  , "RAINBOW"
  , "RAT"
  , "RAZOR"
  , "REINDEER"
  , "RICE"
  , "RIFLE"
  , "RIVER"
  , "ROAD"
  , "ROLL"
  , "ROPE"
  , "RUBBER"
  , "RUSSIA"
  , "RUST"
  , "SACK"
  , "SAHARA"
  , "SALSA"
  , "SALT"
  , "SAND"
  , "SAW"
  , "SCRATCH"
  , "SCROLL"
  , "SECOND"
  , "SHEET"
  , "SHELL"
  , "SHERLOCK"
  , "SHOOT"
  , "SHOULDER"
  , "SHOWER"
  , "SIGN"
  , "SILK"
  , "SKI"
  , "SLED"
  , "SLEEP"
  , "SLOTH"
  , "SMELL"
  , "SMOKE"
  , "SNAKE"
  , "SOAP"
  , "SOUP"
  , "SPHINX"
  , "SPIRIT"
  , "SPOON"
  , "SPURS"
  , "SQUASH"
  , "SQUIRREL"
  , "STABLE"
  , "STAMP"
  , "STEEL"
  , "STEP"
  , "STETHOSCOPE"
  , "STICKER"
  , "STORM"
  , "STREET"
  , "SUMO"
  , "SWAMP"
  , "SWEAT"
  , "SWORD"
  , "TANK"
  , "TATTOO"
  , "TEA"
  , "TEAM"
  , "TEAR"
  , "TEXAS"
  , "THUNDER"
  , "TIGER"
  , "TIP"
  , "TORNADO"
  , "TRICK"
  , "TUNNEL"
  , "TURTLE"
  , "UNIVERSITY"
  , "VALENTINE"
  , "VAMPIRE"
  , "VENUS"
  , "VIKING"
  , "VIOLET"
  , "VIRUS"
  , "VOLCANO"
  , "VOLUME"
  , "WAGON"
  , "WAITRESS"
  , "WALRUS"
  , "WEDDING"
  , "WEREWOLF"
  , "WHEELCHAIR"
  , "WHISTLE"
  , "WING"
  , "WISH"
  , "WONDERLAND"
  , "WOOD"
  , "WOOL"
  , "YELLOWSTONE"
  , "ZOMBIE"
  ]

randomCards :: RandomGen g => g -> [[Card]]
randomCards gen =
  let numCards = length allCards
      allRandoms = randomRs (0, numCards - 1) gen
   in chunksOf 5 . map (allCards !!) $ takeUniques 25 allRandoms

-- takes numbers from the start of the (presumed infinite) list until there
-- are n unique ones
takeUniques :: (Eq a) => Int -> [a] -> [a]
takeUniques n source = go [] source
  where
    go acc (a:as)
      | length acc >= n = acc
      | a `elem` acc = go acc as
      | otherwise = go (a : acc) as

randomCardsIO :: IO [[Card]]
randomCardsIO = getStdGen >>= return . randomCards
